{
  "_from": "express-busboy",
  "_id": "express-busboy@6.0.1",
  "_inBundle": false,
  "_integrity": "sha1-81MUf7ZM2Y5PbkBNeip2+8Cv+v4=",
  "_location": "/express-busboy",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "express-busboy",
    "fetchSpec": "latest",
    "name": "express-busboy",
    "raw": "express-busboy",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/express-busboy/-/express-busboy-6.0.1.tgz",
  "_shasum": "f353147fb64cd98e4f6e404d7a2a76fbc0affafe",
  "_spec": "express-busboy",
  "_where": "/home/marinos/Documents/nodejs/rest_api",
  "author": {
    "email": "davglass@gmail.com",
    "name": "Dav Glass"
  },
  "bugs": {
    "url": "https://github.com/yahoo/express-busboy/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "body": "~5.1.0",
    "connect-busboy": "~0.0.1",
    "mkdirp": "~0.5.0",
    "qs": "^6.4.0",
    "uuid": "~1.4.1"
  },
  "deprecated": false,
  "description": "Busboy for express, mimics the old bodyParser",
  "devDependencies": {
    "eslint": "^3.12.2",
    "express": "~4.8.6",
    "jenkins-mocha": "^4.0.0",
    "nyc": "^10.0.0",
    "portfinder": "~0.2.1",
    "request": "~2.40.0"
  },
  "homepage": "https://github.com/yahoo/express-busboy",
  "keywords": [
    "body-parser",
    "busboy",
    "express"
  ],
  "license": "BSD-3-Clause",
  "main": "index.js",
  "name": "express-busboy",
  "nyc": {
    "branches": 100,
    "check-coverage": true,
    "functions": 100,
    "lines": 100,
    "reporter": [
      "text",
      "text-summary"
    ],
    "statements": 100
  },
  "optionalDependencies": {},
  "readme": "express-busboy\n--------------\n\nA simple `body-parser` like module for express that\nuses [`connect-busboy`](https://github.com/mscdex/connect-busboy) under the hood.\n\nIt's designed to be more of a \"drop in\" replacement for `body-parser`.\nWith it populating `req.body`, there is very minimal code change needed to use it.\n\nusage\n-----\n\n```js\nvar bb = require('express-busboy');\nvar app = express();\n\nbb.extend(app);\n```\n\nThe module will populate `req.body` and `req.files` like the `body-parser` module does.\n\nconfiguration\n-------------\n\n```js\nbb.extend(app, {\n    //options can go here\n});\n```\n\nBy default this module will create an `Array` when it finds multiple fields with the\nsame name in the POST parameters. You can set `restrictMultiple` to `true` to \nnot parse mutiple POST values into `Array`'s\n\nfile uploads\n------------\n\nBy default file uploads are disabled, the `req.files` object will always be empty. You can activate them with:\n\n```js\nbb.extend(app, {\n    upload: true,\n    path: '/path/to/save/files',\n    allowedPath: /./\n});\n```\n\n`path` will default to: `os.tmpdir()/express-busboy/<uuid>/<the field name>/<filename>`.\n\nallowedPath can contain a regular expression limiting the upload function to given urls. For example `/^\\/upload$/` would only allow uploads in the /upload path.\n\n\nYou can have a function returning true/false if you prefer that:\n\n```js\noptions.allowedPath = function(url) {\n    return url == '/upload';\n}\n```\n\nYou can restrict uploads to specific mimetypes as well:\n\n```js\noptions.mimeTypeLimit = [\n    'text/x-markdown',\n    'application/javascript',\n    'image/jpeg',\n    'image/png'\n];\n```\n\nWhen files are not uploaded due to path or mimetype checks, no error is returned (so the other data in the request can be handled) the restricted item\nwill simply not appear in the `req.files` `Object`.\n\nbuild\n-----\n\n[![Build Status](https://travis-ci.org/yahoo/express-busboy.svg?branch=master)](https://travis-ci.org/yahoo/express-busboy)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/yahoo/express-busboy.git"
  },
  "scripts": {
    "posttest": "nyc report",
    "pretest": "eslint --fix .",
    "test": "jenkins-mocha tests/*.js"
  },
  "version": "6.0.1"
}
